name: CxOne AppSec Scanning Pipeline - Test4
on:
  push:
    branches:
      - master
      - main
      - test
      - dev
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - master
      - main
      - test
      - dev
  workflow_dispatch:

permissions:
  contents: read

jobs:
  pre_build_appsec_test:
    name: Using CxOne SAST SCA Container Security Scanning
    permissions:
      contents: read # Required for actions/checkout to fetch code
      security-events: write # Needed for GitHub/codeql-action/upload-sarif
      actions: read # Only required for private repositories

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Run Checkmarx One Scan
      - name: Checkmarx AST Github Action
        uses: Checkmarx/ast-github-action@2.0.44
        with:
          # Provide the AST portal URL
          base_uri: ${{secrets.CX_URL}}
          # Provide the Tenant for AST portal URL
          cx_tenant: ${{secrets.CX_TENANT}}
          # Client ID for AST portal authentication
          cx_client_id: ${{secrets.CX_CLIENT_ID}}
          # Secret key for AST portal authentication
          cx_client_secret: ${{secrets.CX_CLIENT_SECRET}}
          # Checkmarx Project Name (defaults to GitHub repository name if not provided)
          project_name: Prudential-Test
          # Branch Name
          branch: ${{ github.head_ref || github.ref }}
          additional_params: --sast-incremental true --sast-preset-name "ASA Premium" --scan-types sast,sca,container-security --project-tags Singapore GTPT --tags Workshop Imtiyaz --scan-timeout 120 --file-filter !readme --report-format sarif --output-path . --output-name results

      # Step 3: Upload SARIF file (Optional)
      #- name: Upload SARIF file
      #  uses: github/codeql-action/upload-sarif@v3
      #  with:
      #    # Path to SARIF file relative to the root of the repository
      #    sarif_file: results.sarif
      #    # Optional category for the results
      #    # Used to differentiate multiple results for one commit
      #    category: Checkmarx Static Analysis

  post_build_container_image_test:
    needs: pre_build_appsec_test
    name: Using CxOne Container Security Engine for Container Image Scanning
    permissions:
      contents: read # Required for actions/checkout to fetch code
      security-events: write # Needed for GitHub/codeql-action/upload-sarif
      actions: read # Only required for private repositories

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Log in to JFrog Docker Registry
      # - name: Log in to JFrog Docker Registry
      #  uses: docker/login-action@v3
      #  with:
      #    registry: docker-rt-symphony-platform.pruregistry.intranet.asia
      #    username: ${{ secrets.ARTIFACTORY_USER }}
      #    password: ${{ secrets.ARTIFACTORY_TOKEN }}
      
      # Step 3: Pull Images from JFrog Docker Registry
      # - name: Test Pull Docker Image
      #  run: docker pull docker-rt-symphony-platform.pruregistry.intranet.asia/pru-docker-jdk:iptable-amd

      # Step 4: Set up Checkmarx One CLI
      - name: Set up Checkmarx One CLI
        run: |
          CX_VERSION="2.3.14"
          wget "https://github.com/Checkmarx/ast-cli/releases/download/${CX_VERSION}/ast-cli_${CX_VERSION}_linux_x64.tar.gz"
          tar -xvzf ast-cli_${CX_VERSION}_linux_x64.tar.gz
          chmod +x cx
          sudo mv cx /usr/local/bin/
      
      # Step 5: Run Checkmarx One Scan
      - name: Run Checkmarx One Scan
        run: |
           cx scan create -s . \
             --project-name "Prudential-Test-Image" \
             --branch "$(echo ${{ github.head_ref || github.ref }} | sed -e 's#refs/heads/##g')" \
             --base-uri "${{secrets.CX_URL}}" \
             --tenant "${{secrets.CX_TENANT}}" \
             --client-id "${{secrets.CX_CLIENT_ID}}" \
             --client-secret "${{secrets.CX_CLIENT_SECRET}}" \
             --scan-types "container-security" \
             --container-images "heywoodlh/vulnerable:latest"

##########################################################################################################################################
#  deploy_dast_test:
#    needs: post_build_container_image_test
#    name: Using CxOne DAST Engine for Web Application or API Application Scanning
#    permissions:
#      contents: read # Required for actions/checkout to fetch code
#      security-events: write # Needed for GitHub/codeql-action/upload-sarif
#      actions: read # Only required for private repositories
#
#    runs-on: ubuntu-latest
#
#    steps:
#      # Step 1: Checkout Repository
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#      
#      # Step 2: Create Directory for Output
#      - name: Create Directory for Output
#        run: mkdir ${{ github.workspace }}/output_fold
#        
#      # Step 3: Set Correct Permissions
#      - name: Set Correct Permissions
#        run: sudo chmod -R 777 ${{ github.workspace }}/output_fold
#
#      # Step 4: Change Directory Owner
#      - name: Change Directory Owner
#        run: sudo chown -R 1000:1000 ${{ github.workspace }}
#        
#      # Step 5: Run Checkmarx One DAST Scan
#      - name: Checkmarx One DAST Scan
#        uses: Checkmarx/dast-github-action@v2.3.0
#        env:
#          CX_APIKEY: ${{ secrets.CX_ONE_API_KEY }}
#        with:
#          # The type of scan to perform (web, api)
#          command: web
#          # The path to the ZAP configuration file
#          config: ./dast-config.yaml
#          # The base URL for the Checkmarx One Servers
#          base_url: ${{secrets.CX_URL}}
#          # The environment ID previously created in the Frontend
#          environment_id: 191f4ea1-755b-4d6d-8db8-3b20ef2097a1
#          output: ${{ github.workspace }}/output_fold #./output
#          verbose: true
#          
#      - name: Reclaim Output Directory
#        if: always()
#        run: sudo chown -R 1001:1001 ${{ github.workspace }}/output_fold
#        
#      - name: Upload DAST Logs
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: dast-report
#          path: ${{ github.workspace }}/output_fold
##########################################################################################################################################

##########################################################################################################################################      
#      - name: Download SCA Resolver
#        run: |
#          wget https://sca-downloads.s3.amazonaws.com/cli/latest/ScaResolver-linux64.tar.gz
#          tar -xzvf ScaResolver-linux64.tar.gz
#          rm -rf ScaResolver-linux64.tar.gz
#
#      - name: Install Maven, NPM, ... # Add any necessary package management
#        run: |
#          sudo apt install maven npm
#
#      - name: Run Checkmarx One CLI Scan
#        run: |
#          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#          /home/linuxbrew/.linuxbrew/bin/brew install checkmarx/ast-cli/ast-cli
#          /home/linuxbrew/.linuxbrew/Cellar/ast-cli/*/bin/cx \
#            scan create \
#            -s . \
#            --agent GitHub \
#            --project-name ${{ github.repository }} \
#            --branch ${GITHUB_REF##*/} \
#            --base-uri ${{ secrets.CX_BASE_URI }} \
#            --tenant ${{ secrets.CX_TENANT }} \
#            --client-id ${{ secrets.CX_CLIENT_ID }} \
#            --client-secret ${{ secrets.CX_CLIENT_SECRET }} \
#            --sca-resolver ./ScaResolver
##########################################################################################################################################
